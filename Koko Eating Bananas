int findMax(vector<int> piles){
    int maxi = INT_MIN;
    int n = piles.size();
    for(int i = 0; i < n; i++) {
        maxi = max(piles[i], maxi);
    }
    return maxi;
}

long long calculateHour(vector<int> &piles, int hourly){
    long long totalH = 0;
    int n = piles.size();
    for(int i = 0; i < n; i++) {
        totalH += (piles[i] + hourly - 1) / hourly; 
    }
    return totalH;
}

class Solution {
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int low = 1, high = findMax(piles);
        int ans = high; 
        while(low <= high) {
            int mid = low + (high - low) / 2;
            long long totalH = calculateHour(piles, mid);
            if(totalH <= h) {
                ans = mid; 
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
};
